/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.example.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class FullName extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -890726554360259523L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FullName\",\"namespace\":\"org.example.avro\",\"fields\":[{\"name\":\"first\",\"type\":\"string\"},{\"name\":\"last\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FullName> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FullName> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<FullName> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<FullName> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<FullName> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this FullName to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a FullName from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a FullName instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static FullName fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence first;
  private java.lang.CharSequence last;
  private int id;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FullName() {}

  /**
   * All-args constructor.
   * @param first The new value for first
   * @param last The new value for last
   * @param id The new value for id
   */
  public FullName(java.lang.CharSequence first, java.lang.CharSequence last, java.lang.Integer id) {
    this.first = first;
    this.last = last;
    this.id = id;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return first;
    case 1: return last;
    case 2: return id;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: first = (java.lang.CharSequence)value$; break;
    case 1: last = (java.lang.CharSequence)value$; break;
    case 2: id = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'first' field.
   * @return The value of the 'first' field.
   */
  public java.lang.CharSequence getFirst() {
    return first;
  }


  /**
   * Sets the value of the 'first' field.
   * @param value the value to set.
   */
  public void setFirst(java.lang.CharSequence value) {
    this.first = value;
  }

  /**
   * Gets the value of the 'last' field.
   * @return The value of the 'last' field.
   */
  public java.lang.CharSequence getLast() {
    return last;
  }


  /**
   * Sets the value of the 'last' field.
   * @param value the value to set.
   */
  public void setLast(java.lang.CharSequence value) {
    this.last = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public int getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(int value) {
    this.id = value;
  }

  /**
   * Creates a new FullName RecordBuilder.
   * @return A new FullName RecordBuilder
   */
  public static org.example.avro.FullName.Builder newBuilder() {
    return new org.example.avro.FullName.Builder();
  }

  /**
   * Creates a new FullName RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FullName RecordBuilder
   */
  public static org.example.avro.FullName.Builder newBuilder(org.example.avro.FullName.Builder other) {
    if (other == null) {
      return new org.example.avro.FullName.Builder();
    } else {
      return new org.example.avro.FullName.Builder(other);
    }
  }

  /**
   * Creates a new FullName RecordBuilder by copying an existing FullName instance.
   * @param other The existing instance to copy.
   * @return A new FullName RecordBuilder
   */
  public static org.example.avro.FullName.Builder newBuilder(org.example.avro.FullName other) {
    if (other == null) {
      return new org.example.avro.FullName.Builder();
    } else {
      return new org.example.avro.FullName.Builder(other);
    }
  }

  /**
   * RecordBuilder for FullName instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FullName>
    implements org.apache.avro.data.RecordBuilder<FullName> {

    private java.lang.CharSequence first;
    private java.lang.CharSequence last;
    private int id;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.example.avro.FullName.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.first)) {
        this.first = data().deepCopy(fields()[0].schema(), other.first);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.last)) {
        this.last = data().deepCopy(fields()[1].schema(), other.last);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.id)) {
        this.id = data().deepCopy(fields()[2].schema(), other.id);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing FullName instance
     * @param other The existing instance to copy.
     */
    private Builder(org.example.avro.FullName other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.first)) {
        this.first = data().deepCopy(fields()[0].schema(), other.first);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.last)) {
        this.last = data().deepCopy(fields()[1].schema(), other.last);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.id)) {
        this.id = data().deepCopy(fields()[2].schema(), other.id);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'first' field.
      * @return The value.
      */
    public java.lang.CharSequence getFirst() {
      return first;
    }


    /**
      * Sets the value of the 'first' field.
      * @param value The value of 'first'.
      * @return This builder.
      */
    public org.example.avro.FullName.Builder setFirst(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.first = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'first' field has been set.
      * @return True if the 'first' field has been set, false otherwise.
      */
    public boolean hasFirst() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'first' field.
      * @return This builder.
      */
    public org.example.avro.FullName.Builder clearFirst() {
      first = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'last' field.
      * @return The value.
      */
    public java.lang.CharSequence getLast() {
      return last;
    }


    /**
      * Sets the value of the 'last' field.
      * @param value The value of 'last'.
      * @return This builder.
      */
    public org.example.avro.FullName.Builder setLast(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.last = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'last' field has been set.
      * @return True if the 'last' field has been set, false otherwise.
      */
    public boolean hasLast() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'last' field.
      * @return This builder.
      */
    public org.example.avro.FullName.Builder clearLast() {
      last = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public int getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.example.avro.FullName.Builder setId(int value) {
      validate(fields()[2], value);
      this.id = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public org.example.avro.FullName.Builder clearId() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FullName build() {
      try {
        FullName record = new FullName();
        record.first = fieldSetFlags()[0] ? this.first : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.last = fieldSetFlags()[1] ? this.last : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.id = fieldSetFlags()[2] ? this.id : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FullName>
    WRITER$ = (org.apache.avro.io.DatumWriter<FullName>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FullName>
    READER$ = (org.apache.avro.io.DatumReader<FullName>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.first);

    out.writeString(this.last);

    out.writeInt(this.id);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.first = in.readString(this.first instanceof Utf8 ? (Utf8)this.first : null);

      this.last = in.readString(this.last instanceof Utf8 ? (Utf8)this.last : null);

      this.id = in.readInt();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.first = in.readString(this.first instanceof Utf8 ? (Utf8)this.first : null);
          break;

        case 1:
          this.last = in.readString(this.last instanceof Utf8 ? (Utf8)this.last : null);
          break;

        case 2:
          this.id = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










